// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Multi-tenant support
model Tenant {
  id           String         @id @default(uuid())
  name         String
  domain       String         @unique
  logo_path    String?
  primaryColor String         @default("#4F46E5")
  active       Boolean        @default(true)
  created_at   DateTime       @default(now())
  updated_at   DateTime       @updatedAt
  
  // Relationships
  conveyancers   Conveyancer[]
  clients        Client[]
  matters        Matter[]
  documents      Document[]
  documentFolders DocumentFolder[]
  titleSearches  TitleSearch[]
  todos          Todo[]
  matterAuditLogs MatterAuditLog[]
}

// User model (conveyancers)
model Conveyancer {
  id            String    @id @default(uuid())
  tenantId      String
  email         String
  name          String
  password_hash String
  role          String    @default("CONVEYANCER") // ADMIN, CONVEYANCER
  active        Boolean   @default(true)
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  
  // Relationships
  tenant          Tenant           @relation(fields: [tenantId], references: [id])
  matters         Matter[]
  passwordResets  PasswordReset[]
  createdTodos    Todo[]           @relation("TodoCreator")
  assignedTodos   Todo[]           @relation("TodoAssignee")
  completedTodos  Todo[]           @relation("TodoCompleter")
  uploadedDocuments Document[]
  matterAuditLogs MatterAuditLog[]
  
  @@unique([email, tenantId])
}

// Password reset tokens
model PasswordReset {
  id            String   @id @default(uuid())
  conveyancerId String
  token         String   @unique
  expires       DateTime
  created_at    DateTime @default(now())
  
  // Relationships
  conveyancer    Conveyancer @relation(fields: [conveyancerId], references: [id])
}

// Client/contact model
model Client {
  id                    String    @id @default(uuid())
  tenantId              String
  name                  String
  email                 String?
  phone                 String?
  address               String?
  client_type           String    @default("INDIVIDUAL") // INDIVIDUAL, COMPANY, TRUST
  identity_verified     Boolean   @default(false)
  identification_type   String?
  identification_number String?
  verified_at           DateTime?
  notes                 String?
  created_at            DateTime  @default(now())
  updated_at            DateTime  @updatedAt
  
  // Relationships
  tenant        Tenant   @relation(fields: [tenantId], references: [id])
  buyerMatters  Matter[] @relation("BuyerClient")
  sellerMatters Matter[] @relation("SellerClient")
  
  @@index([tenantId])
  @@index([email])
}

// Property matter model
model Matter {
  id               String    @id @default(uuid())
  tenantId         String
  conveyancerId    String
  matter_type      String    // SALE, PURCHASE, TRANSFER
  property_address String
  property_suburb  String?
  property_state   String    @default("NSW")
  property_postcode String?
  folio_identifier String?
  property_status  String?
  property_value   Float?
  date             DateTime
  settlement_date  DateTime?
  buyerId          String?
  sellerId         String?
  amount           Float?
  deposit_amount   Float?
  deposit_paid     Float?
  cooling_off_period String?
  status           String    // PENDING, IN_PROGRESS, COMPLETED
  archived_at      DateTime?
  created_at       DateTime  @default(now())
  updated_at       DateTime  @updatedAt
  
  // Relationships
  tenant         Tenant          @relation(fields: [tenantId], references: [id])
  conveyancer    Conveyancer     @relation(fields: [conveyancerId], references: [id])
  buyer          Client?         @relation("BuyerClient", fields: [buyerId], references: [id])
  seller         Client?         @relation("SellerClient", fields: [sellerId], references: [id])
  documents      Document[]
  documentFolders DocumentFolder[]
  titleSearches  TitleSearch[]
  todos          Todo[]
  auditLogs      MatterAuditLog[]
  
  @@index([tenantId])
  @@index([conveyancerId])
  @@index([buyerId])
  @@index([sellerId])
}

// Document model
model Document {
  id               String    @id @default(uuid())
  tenantId         String
  matterId         String?
  parent_folder_id String?
  uploaded_by      String
  name             String
  description      String?
  category         String    // GENERAL, CONTRACT, IDENTIFICATION, etc.
  file_path        String
  file_name        String
  file_type        String?
  file_extension   String?
  file_size        Int?
  uploaded_at      DateTime
  updated_at       DateTime  @updatedAt
  
  // Relationships
  tenant         Tenant          @relation(fields: [tenantId], references: [id])
  matter         Matter?         @relation(fields: [matterId], references: [id])
  folder         DocumentFolder? @relation(fields: [parent_folder_id], references: [id])
  uploader       Conveyancer     @relation(fields: [uploaded_by], references: [id])
  
  @@index([tenantId])
  @@index([matterId])
  @@index([parent_folder_id])
}

// Document folder model
model DocumentFolder {
  id               String    @id @default(uuid())
  tenantId         String
  matterId         String
  parent_folder_id String?
  name             String
  created_by       String
  created_at       DateTime  @default(now())
  updated_at       DateTime  @updatedAt
  
  // Relationships
  tenant         Tenant          @relation(fields: [tenantId], references: [id])
  matter         Matter          @relation(fields: [matterId], references: [id])
  parentFolder   DocumentFolder? @relation("FolderHierarchy", fields: [parent_folder_id], references: [id])
  childFolders   DocumentFolder[] @relation("FolderHierarchy")
  documents      Document[]
  
  @@index([tenantId])
  @@index([matterId])
  @@index([parent_folder_id])
}

// Title search model
model TitleSearch {
  id                 String    @id @default(uuid())
  tenantId           String
  matterId           String
  requestedById      String
  folio_identifier   String
  property_address   String?
  property_suburb    String?
  property_state     String    @default("NSW")
  property_postcode  String?
  search_type        String    // STANDARD, DETAILED
  status             String    // PENDING, IN_PROGRESS, COMPLETED, FAILED
  results            String?   // JSON string with search results
  requested_at       DateTime
  completed_at       DateTime?
  
  // Relationships
  tenant           Tenant     @relation(fields: [tenantId], references: [id])
  matter           Matter     @relation(fields: [matterId], references: [id])
  
  @@index([tenantId])
  @@index([matterId])
}

// Todo model
model Todo {
  id            String    @id @default(uuid())
  tenantId      String
  title         String
  description   String?
  matterId      String?
  assignedToId  String
  createdById   String
  completedById String?
  dueDate       DateTime?
  priority      String    // LOW, MEDIUM, HIGH
  status        String    // OPEN, IN_PROGRESS, COMPLETED
  created_at    DateTime  @default(now())
  completedAt   DateTime?
  updated_at    DateTime  @updatedAt
  
  // Relationships
  tenant        Tenant      @relation(fields: [tenantId], references: [id])
  matter        Matter?     @relation(fields: [matterId], references: [id])
  assignedTo    Conveyancer @relation("TodoAssignee", fields: [assignedToId], references: [id])
  createdBy     Conveyancer @relation("TodoCreator", fields: [createdById], references: [id])
  completedBy   Conveyancer? @relation("TodoCompleter", fields: [completedById], references: [id])
  
  @@index([tenantId])
  @@index([matterId])
  @@index([assignedToId])
  @@index([createdById])
}

// Matter audit log
model MatterAuditLog {
  id        String   @id @default(uuid())
  tenantId  String
  matterId  String
  userId    String
  action    String   // CREATE, UPDATE, ARCHIVE
  details   String?  // JSON string with changes
  created_at DateTime @default(now())
  
  // Relationships
  tenant   Tenant      @relation(fields: [tenantId], references: [id])
  matter   Matter      @relation(fields: [matterId], references: [id])
  user     Conveyancer @relation(fields: [userId], references: [id])
  
  @@index([tenantId])
  @@index([matterId])
  @@index([userId])
}